---
alwaysApply: true
---
# 项目管理工作流程

本项目采用简洁高效的开发流程，专注于代码质量和功能实现。

## 核心原则

### 效率原则

- 并行执行优于顺序执行，识别可同时进行的任务
- 每个阶段输出最小可验证版本，避免过度设计
- 30 分钟无进展即停止重新评估方法
- 所有交付物必须能独立部署运行

### 质量原则

- 代码包含完整类型注解、文档注释，10 分钟内可理解
- 零配置运行：一条命令即可启动，包含完整依赖
- 安全优先：输入验证、权限检查、数据保护
- 跨平台验证：Windows、macOS、Linux 兼容或明确限制

### 协作原则

- 技术术语配简要解释，确保理解一致
- 决策记录原因、备选方案、风险评估
- 问题报告包含：描述、复现、影响、解决方案
- 每次交流包含需求编号、设计章节、代码位置引用

## 开发工作流

### 功能开发流程

1. **需求分析**：明确功能需求、性能要求、约束条件
2. **技术设计**：确定 API 设计、数据结构、错误处理策略
3. **测试驱动**：先编写测试用例，再实现功能
4. **代码实现**：遵循分层架构，保持代码整洁
5. **质量检查**：运行测试、格式检查、性能验证
6. **文档更新**：更新 API 文档、示例代码、README

### 代码质量标准

- **类型安全**：充分利用 Rust 类型系统，避免运行时错误
- **错误处理**：使用 Result 类型，提供详细的错误信息
- **性能优化**：零拷贝操作，减少内存分配
- **文档完整**：所有公共 API 都有文档注释
- **测试覆盖**：单元测试和集成测试覆盖核心功能

### 发布流程

1. **版本更新**：更新 Cargo.toml 版本号
2. **变更日志**：记录新功能、修复、破坏性变更
3. **测试验证**：运行完整测试套件
4. **文档生成**：生成最新 API 文档
5. **发布准备**：准备发布说明和示例

## 贡献指南

### 提交规范

- 提交信息格式：`type(scope): description`
- 类型：feat、fix、docs、style、refactor、test、chore
- 描述：简洁明了，说明变更内容

### 代码审查

- 架构一致性：遵循分层架构原则
- 性能影响：评估对性能的影响
- 安全性：检查潜在的安全风险
- 可维护性：代码是否易于理解和维护

## 任务执行原则

1. **增量开发**：每个任务独立运行测试
2. **测试驱动**：优先编写测试，然后实现功能
3. **及时集成**：完成功能及时集成主分支
4. **文档同步**：代码和文档保持同步更新
5. **质量检查**：每个任务完成后代码审查
6. **并行执行**：识别同时进行的任务，提高效率
7. **安全优先**：每个功能开发考虑安全影响

## 执行监控

### 进度跟踪

- 实时状态：每日更新任务状态和障碍
- 质量指标：跟踪代码覆盖率、性能指标、安全检查
- 风险预警：及时识别影响进度的风险

### 问题处理流程

1. 问题识别：明确性质和影响范围
2. 解决方案评估：快速评估多个方案成本效益
3. 决策和执行：选择最优方案并立即执行
4. 后续跟踪：验证解决效果防止问题复发

### 协作规范

- 专业亲和：技术语言保持亲和力
- 决策明确：提供清晰精确技术决策，减少歧义
- 支持态度：理解开发困难，提供建设性建议
- 简洁高效：避免冗长说明，优先可操作信息
- 快速反馈：遇到问题及时沟通，不要默默承受
- 上下文完整：提供充分背景信息帮助理解
- 解决方案导向：提出问题同时建议可能解决方案

## 常见问题与解决方案

1. **需求不清晰**：回到需求阶段补充澄清
2. **设计过于复杂**：分解为更小组件或分阶段实现
3. **任务依赖冲突**：重新梳理任务顺序和依赖关系
4. **技术难点**：技术调研并更新设计方案
5. **平台兼容问题**：分别针对不同平台制定适配方案
6. **性能瓶颈**：优先解决关键路径性能问题
7. **安全风险**：立即暂停相关功能开发，重新评估安全方案

## 效率提升技巧

1. **工具并行使用**：同时运行多个不冲突工具和命令
2. **代码批量操作**：一次性处理多个相似代码修改
3. **模板复用**：建立常用代码模板库，提高开发速度
4. **自动化检查**：使用工具自动检查代码质量和安全问题
