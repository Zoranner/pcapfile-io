# This workflow builds multi-architecture binaries and creates GitHub releases
# when a version tag is pushed

name: Create GitHub Release

on:
  workflow_call:
    inputs:
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy checks
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

  build:
    name: Build Multi-Architecture Binaries
    runs-on: ${{ matrix.os }}
    needs: ${{ !inputs.skip_tests && 'test' || '' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: pcapfile-io-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: pcapfile-io-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: pcapfile-io-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: pcapfile-io-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: pcapfile-io-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/pcapfile-io*

  release:
    name: Release to GitHub
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !inputs.skip_tests || github.event_name == 'workflow_call' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate changelog
        id: changelog
        run: |
          # Get current tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the initial release of the pcapfile-io library." >> CHANGELOG.md
          fi
          
          # Output changelog content for subsequent steps
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            pcapfile-io-linux-x86_64/*
            pcapfile-io-linux-aarch64/*
            pcapfile-io-windows-x86_64.exe/*
            pcapfile-io-macos-x86_64/*
            pcapfile-io-macos-aarch64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 